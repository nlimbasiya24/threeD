import {
  FileLoader,
  Loader,
} from "https://cdn.jsdelivr.net/gh/nlimbasiya24/threeD/three.module.min.js";
import { opentype } from "https://cdn.jsdelivr.net/gh/nlimbasiya24/threeD/opentype.module.min.js";
class TTFLoader extends Loader {
  constructor(e) {
    super(e), (this.reversed = !1);
  }
  load(t, o, e, n) {
    const r = this;
    var a = new FileLoader(this.manager);
    a.setPath(this.path),
      a.setResponseType("arraybuffer"),
      a.setRequestHeader(this.requestHeader),
      a.setWithCredentials(this.withCredentials),
      a.load(
        t,
        function (e) {
          try {
            o(r.parse(e));
          } catch (e) {
            n ? n(e) : console.error(e), r.manager.itemError(t);
          }
        },
        e,
        n
      );
  }
  parse(e) {
    if (void 0 === opentype)
      return (
        console.warn(
          "THREE.TTFLoader: The loader requires opentype.js. Make sure it's included before using the loader."
        ),
        null
      );
    {
      var t = opentype.parse(e);
      var o = this.reversed;
      const d = Math.round;
      var n = {};
      const h = 1e5 / (72 * (t.unitsPerEm || 2048));
      var r = t.encoding.cmap.glyphIndexMap,
        a = Object.keys(r);
      for (let e = 0; e < a.length; e++) {
        var s = a[e],
          i = t.glyphs.glyphs[r[s]];
        if (void 0 !== s) {
          const l = {
            ha: d(i.advanceWidth * h),
            x_min: d(i.xMin * h),
            x_max: d(i.xMax * h),
            o: "",
          };
          o &&
            (i.path.commands = (function (e) {
              const t = [];
              let o;
              e.forEach(function (e) {
                "m" === e.type.toLowerCase()
                  ? ((o = [e]), t.push(o))
                  : "z" !== e.type.toLowerCase() && o.push(e);
              });
              const r = [];
              return (
                t.forEach(function (t) {
                  const o = {
                    type: "m",
                    x: t[t.length - 1].x,
                    y: t[t.length - 1].y,
                  };
                  r.push(o);
                  for (let e = t.length - 1; 0 < e; e--) {
                    var n = t[e];
                    const o = { type: n.type };
                    void 0 !== n.x2 && void 0 !== n.y2
                      ? ((o.x1 = n.x2),
                        (o.y1 = n.y2),
                        (o.x2 = n.x1),
                        (o.y2 = n.y1))
                      : void 0 !== n.x1 &&
                        void 0 !== n.y1 &&
                        ((o.x1 = n.x1), (o.y1 = n.y1)),
                      (o.x = t[e - 1].x),
                      (o.y = t[e - 1].y),
                      r.push(o);
                  }
                }),
                r
              );
            })(i.path.commands)),
            i.path.commands.forEach(function (e) {
              "c" === e.type.toLowerCase() && (e.type = "b"),
                (l.o += e.type.toLowerCase() + " "),
                void 0 !== e.x &&
                  void 0 !== e.y &&
                  (l.o += d(e.x * h) + " " + d(e.y * h) + " "),
                void 0 !== e.x1 &&
                  void 0 !== e.y1 &&
                  (l.o += d(e.x1 * h) + " " + d(e.y1 * h) + " "),
                void 0 !== e.x2 &&
                  void 0 !== e.y2 &&
                  (l.o += d(e.x2 * h) + " " + d(e.y2 * h) + " ");
            }),
            (n[String.fromCodePoint(i.unicode)] = l);
        }
      }
      return {
        glyphs: n,
        familyName: t.getEnglishName("fullName"),
        ascender: d(t.ascender * h),
        descender: d(t.descender * h),
        underlinePosition: t.tables.post.underlinePosition,
        underlineThickness: t.tables.post.underlineThickness,
        boundingBox: {
          xMin: t.tables.head.xMin,
          xMax: t.tables.head.xMax,
          yMin: t.tables.head.yMin,
          yMax: t.tables.head.yMax,
        },
        resolution: 1e3,
        original_font_information: t.tables.name,
      };
      return;
    }
  }
}
export { TTFLoader };
